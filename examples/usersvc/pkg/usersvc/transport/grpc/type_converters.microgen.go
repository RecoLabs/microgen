// Code generated by microgen. DO NOT EDIT.

package grpc

import (
	"context"
	pb "github.com/devimteam/microgen/examples/usersvc/pb"
	service "github.com/devimteam/microgen/examples/usersvc/pkg/usersvc"
	transport "github.com/devimteam/microgen/examples/usersvc/pkg/usersvc/transport"
)

func __CreateComment_Request_ToProtobuf(ctx context.Context, value transport.CreateComment_Request) (pb.CreateComment_Request, error) {
	_Comment, err := __usersvcComment_ToProtobuf(value.Comment)
	if err != nil {
		return nil, err
	}
	return pb.CreateComment_Request{Comment: _Comment}, nil
}
func __CreateUser_Request_ToProtobuf(ctx context.Context, value transport.CreateUser_Request) (pb.CreateUser_Request, error) {
	_User, err := __usersvcUser_ToProtobuf(value.User)
	if err != nil {
		return nil, err
	}
	return pb.CreateUser_Request{User: _User}, nil
}
func __UpdateUser_Request_ToProtobuf(ctx context.Context, value transport.UpdateUser_Request) (pb.UpdateUser_Request, error) {
	_User, err := __usersvcUser_ToProtobuf(value.User)
	if err != nil {
		return nil, err
	}
	return pb.UpdateUser_Request{User: _User}, nil
}
func __usersvcComment_ToProtobuf(ctx context.Context, value service.Comment) (pb.Comment, error) {
	_Id := value.Id
	_Text := value.Text
	return pb.Comment{
		Id:   _Id,
		Text: _Text,
	}, nil
}
func __usersvcUser_ToProtobuf(ctx context.Context, value service.User) (pb.User, error) {
	_Id := value.Id
	_Name := value.Name
	_Gender := value.Gender
	_Comments, err := _S_usersvcComment_ToProtobuf(value.Comments)
	if err != nil {
		return nil, err
	}
	return pb.User{
		Comments: _Comments,
		Gender:   _Gender,
		Id:       _Id,
		Name:     _Name,
	}, nil
}
func _S_usersvcComment_ToProtobuf(ctx context.Context, value []service.Comment) ([]pb.Comment, error) {
	if value == nil {
		return nil, nil
	}
	var err error
	converted := make([]pb.Comment, len(value))
	for i := range value {
		converted[i], err = __usersvcComment_ToProtobuf(value[i])
		if err != nil {
			return nil, err
		}
	}
	return converted, nil
}
