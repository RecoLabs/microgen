// Code generated by microgen. DO NOT EDIT.

package service

import (
	"context"
	service "github.com/devimteam/microgen/examples/usersvc/pkg/usersvc"
	opentracinggo "github.com/opentracing/opentracing-go"
	ext "github.com/opentracing/opentracing-go/ext"
	log "github.com/opentracing/opentracing-go/log"
)

var _ service.UserService = &tracingMiddleware{}

func TracingMiddleware(tracer opentracinggo.Tracer) func(service.UserService) service.UserService {
	return func(next service.UserService) service.UserService {
		return &tracingMiddleware{
			next:   next,
			tracer: tracer,
		}
	}
}

type tracingMiddleware struct {
	tracer opentracinggo.Tracer
	next   service.UserService
}

func (M tracingMiddleware) CreateUser(arg_0 context.Context, arg_1 service.User) (res_0 string, res_1 error) {
	var operationSpan opentracinggo.Span
	if parentSpan := opentracinggo.SpanFromContext(arg_0); parentSpan != nil {
		operationSpan = M.tracer.StartSpan(
			"CreateUser",
			ext.RPCServerOption(parentSpan.Context()),
		)
	} else {
		operationSpan = M.tracer.StartSpan(
			"CreateUser",
			ext.SpanKindRPCServer,
		)
	}
	defer func() {
		operationSpan.LogFields(log.Error(res_1))
		ext.Error.Set(operationSpan, res_1 != nil)
		operationSpan.Finish()
	}()
	ext.Component.Set(operationSpan, "UserService")
	arg_0 = opentracinggo.ContextWithSpan(arg_0, operationSpan)
	return M.next.CreateUser(arg_0, arg_1)
}

func (M tracingMiddleware) UpdateUser(arg_0 context.Context, arg_1 service.User) (res_0 error) {
	var operationSpan opentracinggo.Span
	if parentSpan := opentracinggo.SpanFromContext(arg_0); parentSpan != nil {
		operationSpan = M.tracer.StartSpan(
			"UpdateUser",
			ext.RPCServerOption(parentSpan.Context()),
		)
	} else {
		operationSpan = M.tracer.StartSpan(
			"UpdateUser",
			ext.SpanKindRPCServer,
		)
	}
	defer func() {
		operationSpan.LogFields(log.Error(res_0))
		ext.Error.Set(operationSpan, res_0 != nil)
		operationSpan.Finish()
	}()
	ext.Component.Set(operationSpan, "UserService")
	arg_0 = opentracinggo.ContextWithSpan(arg_0, operationSpan)
	return M.next.UpdateUser(arg_0, arg_1)
}

func (M tracingMiddleware) GetUser(arg_0 context.Context, arg_1 string) (res_0 service.User, res_1 error) {
	var operationSpan opentracinggo.Span
	if parentSpan := opentracinggo.SpanFromContext(arg_0); parentSpan != nil {
		operationSpan = M.tracer.StartSpan(
			"GetUser",
			ext.RPCServerOption(parentSpan.Context()),
		)
	} else {
		operationSpan = M.tracer.StartSpan(
			"GetUser",
			ext.SpanKindRPCServer,
		)
	}
	defer func() {
		operationSpan.LogFields(log.Error(res_1))
		ext.Error.Set(operationSpan, res_1 != nil)
		operationSpan.Finish()
	}()
	ext.Component.Set(operationSpan, "UserService")
	arg_0 = opentracinggo.ContextWithSpan(arg_0, operationSpan)
	return M.next.GetUser(arg_0, arg_1)
}

func (M tracingMiddleware) FindUsers(arg_0 context.Context) (res_0 []*service.User, res_1 error) {
	var operationSpan opentracinggo.Span
	if parentSpan := opentracinggo.SpanFromContext(arg_0); parentSpan != nil {
		operationSpan = M.tracer.StartSpan(
			"FindUsers",
			ext.RPCServerOption(parentSpan.Context()),
		)
	} else {
		operationSpan = M.tracer.StartSpan(
			"FindUsers",
			ext.SpanKindRPCServer,
		)
	}
	defer func() {
		operationSpan.LogFields(log.Error(res_1))
		ext.Error.Set(operationSpan, res_1 != nil)
		operationSpan.Finish()
	}()
	ext.Component.Set(operationSpan, "UserService")
	arg_0 = opentracinggo.ContextWithSpan(arg_0, operationSpan)
	return M.next.FindUsers(arg_0)
}

func (M tracingMiddleware) CreateComment(arg_0 context.Context, arg_1 service.Comment) (res_0 string, res_1 error) {
	var operationSpan opentracinggo.Span
	if parentSpan := opentracinggo.SpanFromContext(arg_0); parentSpan != nil {
		operationSpan = M.tracer.StartSpan(
			"CreateComment",
			ext.RPCServerOption(parentSpan.Context()),
		)
	} else {
		operationSpan = M.tracer.StartSpan(
			"CreateComment",
			ext.SpanKindRPCServer,
		)
	}
	defer func() {
		operationSpan.LogFields(log.Error(res_1))
		ext.Error.Set(operationSpan, res_1 != nil)
		operationSpan.Finish()
	}()
	ext.Component.Set(operationSpan, "UserService")
	arg_0 = opentracinggo.ContextWithSpan(arg_0, operationSpan)
	return M.next.CreateComment(arg_0, arg_1)
}

func (M tracingMiddleware) GetComment(arg_0 context.Context, arg_1 string) (res_0 service.Comment, res_1 error) {
	var operationSpan opentracinggo.Span
	if parentSpan := opentracinggo.SpanFromContext(arg_0); parentSpan != nil {
		operationSpan = M.tracer.StartSpan(
			"GetComment",
			ext.RPCServerOption(parentSpan.Context()),
		)
	} else {
		operationSpan = M.tracer.StartSpan(
			"GetComment",
			ext.SpanKindRPCServer,
		)
	}
	defer func() {
		operationSpan.LogFields(log.Error(res_1))
		ext.Error.Set(operationSpan, res_1 != nil)
		operationSpan.Finish()
	}()
	ext.Component.Set(operationSpan, "UserService")
	arg_0 = opentracinggo.ContextWithSpan(arg_0, operationSpan)
	return M.next.GetComment(arg_0, arg_1)
}

func (M tracingMiddleware) GetUserComments(arg_0 context.Context, arg_1 string) (res_0 []service.Comment, res_1 error) {
	var operationSpan opentracinggo.Span
	if parentSpan := opentracinggo.SpanFromContext(arg_0); parentSpan != nil {
		operationSpan = M.tracer.StartSpan(
			"GetUserComments",
			ext.RPCServerOption(parentSpan.Context()),
		)
	} else {
		operationSpan = M.tracer.StartSpan(
			"GetUserComments",
			ext.SpanKindRPCServer,
		)
	}
	defer func() {
		operationSpan.LogFields(log.Error(res_1))
		ext.Error.Set(operationSpan, res_1 != nil)
		operationSpan.Finish()
	}()
	ext.Component.Set(operationSpan, "UserService")
	arg_0 = opentracinggo.ContextWithSpan(arg_0, operationSpan)
	return M.next.GetUserComments(arg_0, arg_1)
}
