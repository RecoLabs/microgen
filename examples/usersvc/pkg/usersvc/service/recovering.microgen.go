// Code generated by microgen. DO NOT EDIT.

package service

import (
	"context"
	"fmt"
	service "github.com/devimteam/microgen/examples/usersvc/pkg/usersvc"
	log "github.com/go-kit/kit/log"
	"runtime"
)

var _ service.UserService = &recoveringMiddleware{}

func RecoveringMiddleware(logger log.Logger) func(service.UserService) service.UserService {
	return func(next service.UserService) service.UserService {
		return &recoveringMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type recoveringMiddleware struct {
	logger log.Logger
	next   service.UserService
}

func (M recoveringMiddleware) CreateUser(ctx context.Context, user service.User) (id string, err error) {
	defer func() {
		if r := recover(); r != nil {
			const size = 64 << 10
			stack := make([]byte, size)
			stack = stack[:runtime.Stack(stack, false)]
			M.logger.Log(
				"method", "CreateUser",
				"message", r,
				"stack", string(stack))
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.CreateUser(ctx, user)
}

func (M recoveringMiddleware) UpdateUser(ctx context.Context, user service.User) (err error) {
	defer func() {
		if r := recover(); r != nil {
			const size = 64 << 10
			stack := make([]byte, size)
			stack = stack[:runtime.Stack(stack, false)]
			M.logger.Log(
				"method", "UpdateUser",
				"message", r,
				"stack", string(stack))
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.UpdateUser(ctx, user)
}

func (M recoveringMiddleware) GetUser(ctx context.Context, id string) (user service.User, err error) {
	defer func() {
		if r := recover(); r != nil {
			const size = 64 << 10
			stack := make([]byte, size)
			stack = stack[:runtime.Stack(stack, false)]
			M.logger.Log(
				"method", "GetUser",
				"message", r,
				"stack", string(stack))
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetUser(ctx, id)
}

func (M recoveringMiddleware) FindUsers(ctx context.Context) (results map[string]service.User, err error) {
	defer func() {
		if r := recover(); r != nil {
			const size = 64 << 10
			stack := make([]byte, size)
			stack = stack[:runtime.Stack(stack, false)]
			M.logger.Log(
				"method", "FindUsers",
				"message", r,
				"stack", string(stack))
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.FindUsers(ctx)
}

func (M recoveringMiddleware) CreateComment(ctx context.Context, comment service.Comment) (id string, err error) {
	defer func() {
		if r := recover(); r != nil {
			const size = 64 << 10
			stack := make([]byte, size)
			stack = stack[:runtime.Stack(stack, false)]
			M.logger.Log(
				"method", "CreateComment",
				"message", r,
				"stack", string(stack))
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.CreateComment(ctx, comment)
}

func (M recoveringMiddleware) GetComment(ctx context.Context, id string) (comment service.Comment, err error) {
	defer func() {
		if r := recover(); r != nil {
			const size = 64 << 10
			stack := make([]byte, size)
			stack = stack[:runtime.Stack(stack, false)]
			M.logger.Log(
				"method", "GetComment",
				"message", r,
				"stack", string(stack))
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetComment(ctx, id)
}

func (M recoveringMiddleware) GetUserComments(ctx context.Context, userId string) (list []service.Comment, err error) {
	defer func() {
		if r := recover(); r != nil {
			const size = 64 << 10
			stack := make([]byte, size)
			stack = stack[:runtime.Stack(stack, false)]
			M.logger.Log(
				"method", "GetUserComments",
				"message", r,
				"stack", string(stack))
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetUserComments(ctx, userId)
}
