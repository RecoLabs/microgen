// Code generated by microgen.
// DO NOT EDIT!
package {{ .Interface.PackageName }}

import (
{{- range .Interface.Imports }}
	{{ .Alias }} {{ .Path }}
{{- end }}
	"github.com/go-kit/kit/endpoint"
)

type Endpoints struct {
	{{- range .Interface.FuncSignatures}}
	{{ .Name }}Endpoint endpoint.Endpoint
	{{- end}}
}

{{ $svcName := .Interface.Name }}
{{range .Interface.FuncSignatures}}
func (e *Endpoints) {{ .Name }}({{- range $i, $_ := .Params }}{{ if $i }}, {{ end }}{{ .Name }} {{ if .IsPointer }}*{{ end }}{{ if .PackageAlias }}{{ .PackageAlias }}.{{ end }}{{ .Type }}{{- end }}) ({{range $i, $_ :=  .Results }}{{ if $i }}, {{ end }}{{ .Name }} {{ if .IsArray }}[]{{ end }}{{ if .IsPointer }}*{{ end }}{{ if .PackageAlias }}{{ .PackageAlias }}.{{ end }}{{ .Type }}{{- end }}) {
    {{- $fsName := .Name }}
    req := {{ .Name }}Request{
    {{- range .Params }}
        {{- if ne .PackageAlias "context" }}
        {{ .Name | ToUpperFirst }}: {{ .Name }},
        {{- end }}
    {{- end }}
    }
    resp, err := e.{{ .Name }}Endpoint(ctx, &req)
    if err != nil {
        return
    }
    return {{ range $i, $_ := .Results }}{{ if $i }}, {{ end }}resp.(*{{ $fsName }}Response).{{ .Name | ToUpperFirst }}{{ end }}
}

func {{ .Name }}Endpoint(svc {{ $svcName }}) endpoint.Endpoint {
    return func(ctx context.Context, request interface{}) (response interface{}, err error) {
        {{- if gt (len .Params) 1 }}
        req := request.(*{{ .Name }}Request)
        {{ end }}
        {{- range $i, $_ := .Results -}}
            {{ if $i }}, {{ end }}{{ .Name }}{{ end }}:= svc.{{ .Name }}(ctx
            {{- range $i, $_ := .Params }}
                {{- if ne .PackageAlias "context" -}}
                    , req.{{ .Name | ToUpperFirst }}
                {{- end }}
            {{- end }})
        return &{{ .Name }}Response{
        {{- range $i, $_ := .Results }}
            {{ .Name | ToUpperFirst }}: {{.Name}},
        {{- end }}
        }, nil
    }
}
{{end}}