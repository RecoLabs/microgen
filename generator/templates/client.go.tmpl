// Code generated by microgen.
// DO NOT EDIT!
package {{ .Interface.PackageName }}

import (
{{- range .Interface.Imports }}
	{{ .Alias }} {{ .Path }}
{{- end }}
	"github.com/l-vitaly/go-kit/transportlayer"
)

type client struct {
    tc transportlayer.Client
}

func NewClient(tc transportlayer.Client) {{ .Interface.Name }} {
    return &client{tc}
}

{{- range .Interface.FuncSignatures }}

func (c *client) {{ .Name }}({{- range $i, $_ := .Params }}{{ if $i }}, {{ end }}{{ .Name }} {{ if .IsPointer }}*{{ end }}{{ if .PackageAlias }}{{ .PackageAlias }}.{{ end }}{{ .Type }}{{- end }}) ({{range $i, $_ :=  .Results }}{{ if $i }}, {{ end }}{{ .Name }} {{ if .IsArray }}[]{{ end }}{{ if .IsPointer }}*{{ end }}{{ if .PackageAlias }}{{ .PackageAlias }}.{{ end }}{{ .Type }}{{- end }}) {
	defer func(begin time.Time) {
		sl.logger.Log(
			"method", "{{ .Name }}",
			{{- range .Params }}
			"{{ .Name }}", {{ .Name }},
			{{- end }}
			{{- range .Results }}
			"{{ .Name }}", {{ .Name }},
			{{- end }}
			"took", time.Since(begin),
		)
	}(time.Now())
	return sl.next.{{ .Name }}({{ range $i, $_ := .Results }}{{ if $i }}, {{ end }}{{ .Name }}{{ end }})
}

{{ end }}