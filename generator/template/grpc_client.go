package template

import (
	"strings"

	"github.com/vetcher/godecl/types"
	. "github.com/vetcher/jennifer/jen"
)

type GRPCClientTemplate struct {
	Info *GenerationInfo
}

func (t *GRPCClientTemplate) grpcConverterPackagePath() string {
	return t.Info.ServiceDir + "/transport/converter/protobuf"
}

// Render whole grpc client file.
//
//		// This file was automatically generated by "microgen" utility.
//		// Please, do not edit.
//		package transportgrpc
//
//		import (
//			transportlayer "github.com/devimteam/go-kit/transportlayer"
//			grpc1 "github.com/devimteam/go-kit/transportlayer/grpc"
//			svc "github.com/devimteam/microgen/test/svc"
//			protobuf "github.com/devimteam/microgen/test/svc/transport/converter/protobuf"
//			grpc "google.golang.org/grpc"
//		)
//
//		func NewClient(conn *grpc.ClientConn) svc.StringService {
//			endpoints := []transportlayer.Endpoint{
//				transportlayer.NewEndpoint(
//					"Count",
//					nil,
//					transportlayer.WithConverter(protobuf.CountConverter),
// 				),
// 			}
//			return svc.NewClient(
//				grpc1.NewClient(
//					"devim.string.protobuf.StringService",
//					conn,
//					endpoints,
// 				),
// 			)
//		}
//
func (t *GRPCClientTemplate) Render(i *GenerationInfo) *Statement {
	f := Statement{}

	f.Func().Id("NewGRPCClient").
		Params(
			Id("conn").Op("*").Qual(PackagePathGoogleGRPC, "ClientConn"),
			Id("opts").Op("...").Qual(PackagePathGoKitTransportGRPC, "ClientOption"),
		).Qual(t.Info.ServiceDir, i.Iface.Name).
		BlockFunc(func(g *Group) {
			g.Return().Qual(t.Info.ServiceDir, "Endpoints").Values(DictFunc(func(d Dict) {
				for _, m := range i.Iface.Methods {
					d[Id(endpointStructName(m.Name))] = Qual(PackagePathGoKitTransportGRPC, "NewClient").Call(
						Line().Id("conn"),
						// TODO: resolve this
						Line().Lit("devim."+strings.ToLower(strings.TrimSuffix(i.Iface.Name, "Service"))+".protobuf."+i.Iface.Name),
						Line().Lit(m.Name),
						Line().Qual(pathToConverter(t.Info.ServiceDir), encodeRequestName(m)),
						Line().Qual(pathToConverter(t.Info.ServiceDir), decodeResponseName(m)),
						Line().Add(t.replyType(m)),
						Line().Id("opts").Op("...").Line(),
					).Dot("Endpoint").Call()
				}
			}))
		})
	return &f
}

// Renders reply type argument
// 		stringsvc.CountResponse{}
func (t *GRPCClientTemplate) replyType(signature *types.Function) *Statement {
	return Qual(protobufPath(t.Info.ServicePackageName), responseStructName(signature)).Values()
}

func (GRPCClientTemplate) DefaultPath() string {
	return "./transport/grpc/client.go"
}
