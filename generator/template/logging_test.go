package template

import (
	goparser "go/parser"
	"go/token"
	"testing"

	"bytes"

	"github.com/devimteam/microgen/generator"
	parser "github.com/devimteam/microgen/parser"
)

func TestLoggingMiddlewareForCountSvc(t *testing.T) {
	src := `package stringsvc

	import (
		"context"
	)

	type StringService interface {
		Count(ctx context.Context, text string, symbol string) (count int, positions []int)
	}`

	out := `// This file was automatically generated by "microgen" utility.
// Please, do not edit.
package stringsvc

import (
	context "context"
	svc "github.com/devimteam/microgen/test/svc"
	log "github.com/go-kit/kit/log"
	time "time"
)

func ServiceLogging(logger log.Logger) Middleware {
	return func(next svc.StringService) svc.StringService {
		return &serviceLogging{
			logger: logger,
			next:   next,
		}
	}
}

type serviceLogging struct {
	logger log.Logger
	next   svc.StringService
}

func (s *serviceLogging) Count(ctx context.Context, text string, symbol string) (count int, positions []int) {
	defer func(begin time.Time) {
		s.logger.Log(
			"method", "Count",
			"text", text,
			"symbol", symbol,
			"count", count,
			"positions", positions,
			"took", time.Since(begin))
	}(time.Now())
	return s.next.Count(ctx, text, symbol)
}
` // Blank line!
	f, err := goparser.ParseFile(token.NewFileSet(), "", src, 0)
	if err != nil {
		t.Errorf("unable to parse file: %v", err)
	}
	fs, err := parser.ParseInterface(f, "StringService")
	if err != nil {
		t.Errorf("could not get interface func signatures: %v", err)
	}
	buf := bytes.NewBuffer([]byte{})
	gen := generator.NewGenerator([]generator.Template{
		&LoggingTemplate{PackagePath: "github.com/devimteam/microgen/test/svc"},
	}, fs, generator.NewWriterStrategy(buf))
	err = gen.Generate()
	if err != nil {
		t.Errorf("unable to generate: %v", err)
	}
	if buf.String() != out {
		t.Errorf("Got:\n\n%v\n\nShould be:\n\n%v", buf.String(), out)
	}
}
