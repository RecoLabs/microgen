package template

import (
	. "github.com/dave/jennifer/jen"
	"github.com/devimteam/microgen/parser"
	"github.com/devimteam/microgen/util"
)

var (
	defaultProtoTypes = []string{"string", "bool", "byte", "int64", "uint64", "float64", "int32", "uint32", "float32"}
	goToProtoTypesMap = map[string]string{
		"uint": "uint64",
		"int":  "int64",
	}
	defaultGolangTypes = []string{"string", "bool", "int", "uint", "byte", "int64", "uint64", "float64", "int32", "uint32", "float32"}
)

type GRPCEndpointConverterTemplate struct {
	PackagePath string
}

func (t GRPCClientTemplate) grpcConverterPackagePath() string {
	return t.PackagePath + "/transport/converter/protobuf"
}

// Renders converter file.
//
//		// This file was automatically generated by "microgen" utility.
//		// Please, do not edit.
//		package protobuf
//
//		import (
//			context "context"
//			grpc "github.com/devimteam/go-kit/transportlayer/grpc"
//			svc "github.com/devimteam/microgen/test/svc"
//			util "github.com/devimteam/microgen/test/svc/util"
//			stringsvc "gitlab.devim.team/protobuf/stringsvc"
//		)
//
//		var CountConverter = &grpc.EndpointConverter{
//			func(_ context.Context, request interface{}) (interface{}, error) {
//				req := request.(*svc.CountRequest)
//				return &stringsvc.CountRequest{
//					Symbol: req.Symbol,
//					Text:   req.Text,
//				}, nil
//			},
//			func(_ context.Context, response interface{}) (interface{}, error) {
//				resp := response.(*svc.CountResponse)
//				respPositions, err := IntListToProto(resp.Positions)
//				if err != nil {
//					return nil, err
//				}
//				return &stringsvc.CountResponse{
//					Count:     int64(resp.Count),
//					Positions: respPositions,
//				}, nil
//			},
//			func(_ context.Context, request interface{}) (interface{}, error) {
//				req := request.(*stringsvc.CountRequest)
//				return &svc.CountRequest{
//					Symbol: string(req.Symbol),
//					Text:   string(req.Text),
//				}, nil
//			},
//			func(_ context.Context, response interface{}) (interface{}, error) {
//				resp := response.(*stringsvc.CountResponse)
//				respPositions, err := ProtoToIntList(resp.Positions)
//				if err != nil {
//					return nil, err
//				}
//				return &svc.CountResponse{
//					Count:     int(resp.Count),
//					Positions: respPositions,
//				}, nil
//			},
//			stringsvc.CountResponse{},
//		}
//
func (t GRPCEndpointConverterTemplate) Render(i *parser.Interface) *File {
	f := NewFile("protobuf")

	for _, signature := range i.FuncSignatures {
		f.Var().Id(converterStructName(signature)).Op("=").Op("&").Qual(PackagePathTransportLayerGRPC, "EndpointConverter").
			ValuesFunc(func(g *Group) {
				g.Add(t.encodeRequest(signature, i))
				g.Add(t.encodeResponse(signature, i))
				g.Add(t.decodeRequest(signature, i))
				g.Add(t.decodeResponse(signature, i))
				g.Add(t.replyType(signature, i))
				g.Line()
			})
		f.Line()
	}

	return f
}

// Returns FieldTypeToProto.
func typeToProto(field *parser.FuncField) string {
	methodName := util.ToUpperFirst(field.Type)
	if field.IsPointer {
		methodName += "Ptr"
	}
	if field.IsArray {
		methodName += "List"
	}
	return methodName + "ToProto"
}

// Returns ProtoToFieldType.
func protoToType(field *parser.FuncField) string {
	methodName := "ProtoTo" + util.ToUpperFirst(field.Type)
	if field.IsPointer {
		methodName += "Ptr"
	}
	if field.IsArray {
		methodName += "List"
	}
	return methodName
}

func (GRPCEndpointConverterTemplate) Path() string {
	return "./transport/converter/protobuf/endpoint_converters.go"
}

// Renders type conversion (if need) to default protobuf types.
//		req.Symbol
// or
//		int(resp.Count)
// or
//		structNamePositions
// based on field type
// Second result means can field converts to default protobuf type.
func golangTypeToProto(structName string, field *parser.FuncField) (*Statement, bool) {
	if field.IsArray || field.IsPointer {
		return Id(structName + util.ToUpperFirst(field.Name)), false
	} else if isDefaultProtoField(field) {
		return Id(structName).Dot(util.ToUpperFirst(field.Name)), true
	} else if newType, ok := goToProtoTypesMap[field.Type]; ok {
		newField := &parser.FuncField{
			Type:      newType,
			Name:      field.Name,
			IsArray:   field.IsArray,
			Package:   field.Package,
			IsPointer: field.IsPointer,
		}
		return fieldType(newField).Call(Id(structName).Dot(util.ToUpperFirst(field.Name))), true
	}
	return Id(structName + util.ToUpperFirst(field.Name)), false
}

// Renders type conversion to default golang types.
// 		int(resp.Count)
// or
// 		structNamePositions
// based on field type
// Second result means can field converts to golang type.
func protoTypeToGolang(structName string, field *parser.FuncField) (*Statement, bool) {
	if field.IsArray || field.IsPointer {
		return Id(structName + util.ToUpperFirst(field.Name)), false
	} else if isDefaultGolangField(field) {
		return fieldType(field).Call(Id(structName).Dot(util.ToUpperFirst(field.Name))), true
	}
	return Id(structName + util.ToUpperFirst(field.Name)), false
}

func isDefaultProtoField(field *parser.FuncField) bool {
	return util.IsInStringSlice(field.Type, defaultProtoTypes)
}

func isDefaultGolangField(field *parser.FuncField) bool {
	return util.IsInStringSlice(field.Type, defaultGolangTypes)
}

// Render custom type converting and error checking
//
//		structNamePositions, err := ProtoToIntList(structName.Positions)
//		if err != nil {
//			return nil, err
//		}
//
func (t GRPCEndpointConverterTemplate) convertCustomType(structName, converterName string, field *parser.FuncField) *Statement {
	return List(Id(structName+util.ToUpperFirst(field.Name)), Err()).
		Op(":=").
		Add(
			Id(converterName).
				Call(Id(structName).
					Dot(util.ToUpperFirst(field.Name))),
		).
		Line().If(Err().Op("!=").Nil()).Block(
		Return().List(Nil(), Err()),
	)
}

// Renders function for encoding request, golang type converts to proto type.
//
//		func(_ context.Context, request interface{}) (interface{}, error) {
//			req := request.(*svc.CountRequest)
//			return &stringsvc.CountRequest{
//				Symbol: req.Symbol,
//				Text:   req.Text,
//			}, nil
//		}
//
func (t GRPCEndpointConverterTemplate) encodeRequest(signature *parser.FuncSignature, i *parser.Interface) *Statement {
	methodParams := removeContextIfFirst(signature.Params)
	return Line().Func().Call(Op("_").Qual(PackagePathContext, "Context"), Id("request").Interface()).Params(Interface(), Error()).BlockFunc(
		func(group *Group) {
			if len(methodParams) > 0 {
				group.Id("req").Op(":=").Id("request").Assert(Op("*").Qual(t.PackagePath, requestStructName(signature)))
				for _, field := range methodParams {
					if _, ok := golangTypeToProto("", field); !ok {
						group.Add(t.convertCustomType("req", typeToProto(field), field))
					}
				}
			}
			group.Return().List(Op("&").Qual(protobufPath(i), requestStructName(signature)).Values(DictFunc(func(dict Dict) {
				for _, field := range methodParams {
					req, _ := golangTypeToProto("req", field)
					dict[structFieldName(field)] = Line().Add(req)
				}
			})), Nil())
		},
	)
}

// Renders function for encoding response, golang type converts to proto type.
//
//		func(_ context.Context, response interface{}) (interface{}, error) {
//			resp := response.(*svc.CountResponse)
//			respPositions, err := IntListToProto(resp.Positions)
//			if err != nil {
//				return nil, err
//			}
//			return &stringsvc.CountResponse{
//				Count:     int64(resp.Count),
//				Positions: respPositions,
//			}, nil
//		}
//
func (t GRPCEndpointConverterTemplate) encodeResponse(signature *parser.FuncSignature, i *parser.Interface) *Statement {
	methodResults := removeContextIfFirst(signature.Results)
	return Line().Func().Call(Op("_").Qual(PackagePathContext, "Context"), Id("response").Interface()).Params(Interface(), Error()).BlockFunc(
		func(group *Group) {
			if len(methodResults) > 0 {
				group.Id("resp").Op(":=").Id("response").Assert(Op("*").Qual(t.PackagePath, responseStructName(signature)))
				for _, field := range methodResults {
					if _, ok := golangTypeToProto("", field); !ok {
						group.Add(t.convertCustomType("resp", typeToProto(field), field))
					}
				}
			}
			group.Return().List(Op("&").Qual(protobufPath(i), responseStructName(signature)).Values(DictFunc(func(dict Dict) {
				for _, field := range methodResults {
					resp, _ := golangTypeToProto("resp", field)
					dict[structFieldName(field)] = Line().Add(resp)
				}
			})), Nil())
		},
	)
}

// Renders function for decoding request, proto type converts to golang type.
//
//		func(_ context.Context, request interface{}) (interface{}, error) {
//			req := request.(*stringsvc.CountRequest)
//			return &svc.CountRequest{
//				Symbol: string(req.Symbol),
//				Text:   string(req.Text),
//			}, nil
//		}
//
func (t GRPCEndpointConverterTemplate) decodeRequest(signature *parser.FuncSignature, i *parser.Interface) *Statement {
	methodParams := removeContextIfFirst(signature.Params)
	return Line().Func().Call(Op("_").Qual(PackagePathContext, "Context"), Id("request").Interface()).Params(Interface(), Error()).BlockFunc(
		func(group *Group) {
			if len(methodParams) > 0 {
				group.Id("req").Op(":=").Id("request").Assert(Op("*").Qual(protobufPath(i), requestStructName(signature)))
				for _, field := range methodParams {
					if _, ok := protoTypeToGolang("", field); !ok {
						group.Add(t.convertCustomType("req", protoToType(field), field))
					}
				}
			}
			group.Return().List(Op("&").Qual(t.PackagePath, requestStructName(signature)).Values(DictFunc(func(dict Dict) {
				for _, field := range methodParams {
					req, _ := protoTypeToGolang("req", field)
					dict[structFieldName(field)] = Line().Add(req)
				}
			})), Nil())
		},
	)
}

// Renders function for decoding response, proto type converts to golang type.
//
//		func(_ context.Context, response interface{}) (interface{}, error) {
//			resp := response.(*stringsvc.CountResponse)
//			respPositions, err := ProtoToIntList(resp.Positions)
//			if err != nil {
//				return nil, err
//			}
//			return &svc.CountResponse{
//				Count:     int(resp.Count),
//				Positions: respPositions,
//			}, nil
//		}
//
func (t GRPCEndpointConverterTemplate) decodeResponse(signature *parser.FuncSignature, i *parser.Interface) *Statement {
	methodResults := removeContextIfFirst(signature.Results)
	return Line().Func().Call(Op("_").Qual(PackagePathContext, "Context"), Id("response").Interface()).Params(Interface(), Error()).BlockFunc(
		func(group *Group) {
			if len(methodResults) > 0 {
				group.Id("resp").Op(":=").Id("response").Assert(Op("*").Qual(protobufPath(i), responseStructName(signature)))
				for _, field := range methodResults {
					if _, ok := protoTypeToGolang("", field); !ok {
						group.Add(t.convertCustomType("resp", protoToType(field), field))
					}
				}
			}
			group.Return().List(Op("&").Qual(t.PackagePath, responseStructName(signature)).Values(DictFunc(func(dict Dict) {
				for _, field := range methodResults {
					resp, _ := protoTypeToGolang("resp", field)
					dict[structFieldName(field)] = Line().Add(resp)
				}
			})), Nil())
		},
	)
}

// Renders reply type argument
// 		stringsvc.CountResponse{}
func (t GRPCEndpointConverterTemplate) replyType(signature *parser.FuncSignature, i *parser.Interface) *Statement {
	return Line().Qual(protobufPath(i), responseStructName(signature)).Values()
}
