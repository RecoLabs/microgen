package template

import (
	. "github.com/dave/jennifer/jen"
	"github.com/devimteam/microgen/parser"
	"github.com/devimteam/microgen/util"
)

type StubGRPCTypeConverterTemplate struct {
	PackagePath               string
	alreadyRenderedConverters []string
}

// Render whole file with protobuf converters.
//
//		// This file was automatically generated by "microgen" utility.
//		package protobuf
//
//		func IntListToProto(positions []int) (protoPositions []int64, convPositionsErr error) {
//			return
//		}
//
//		func ProtoToIntList(protoPositions []int64) (positions []int, convPositionsErr error) {
//			return
//		}
//
func (t StubGRPCTypeConverterTemplate) Render(i *parser.Interface) *File {
	t.alreadyRenderedConverters = []string{}
	f := NewFile("protobuf")

	for _, signature := range i.FuncSignatures {
		for _, field := range removeContextIfFirst(signature.Params) {
			if !canConvertGolangToProto(field) && !util.IsInStringSlice(typeToProto(field), t.alreadyRenderedConverters) {
				f.Add(t.stubConverterToProto(field, i))
				f.Line()
				t.alreadyRenderedConverters = append(t.alreadyRenderedConverters, typeToProto(field))
			}
			if !canConvertProtoToGolang(field) && !util.IsInStringSlice(protoToType(field), t.alreadyRenderedConverters) {
				f.Add(t.stubConverterProtoTo(field, i))
				f.Line()
				t.alreadyRenderedConverters = append(t.alreadyRenderedConverters, protoToType(field))
			}
		}
		for _, field := range removeContextIfFirst(signature.Results) {
			if !canConvertGolangToProto(field) && !util.IsInStringSlice(typeToProto(field), t.alreadyRenderedConverters) {
				f.Add(t.stubConverterToProto(field, i))
				f.Line()
				t.alreadyRenderedConverters = append(t.alreadyRenderedConverters, typeToProto(field))
			}
			if !canConvertProtoToGolang(field) && !util.IsInStringSlice(protoToType(field), t.alreadyRenderedConverters) {
				f.Add(t.stubConverterProtoTo(field, i))
				f.Line()
				t.alreadyRenderedConverters = append(t.alreadyRenderedConverters, protoToType(field))
			}
		}
	}

	return f
}

func (StubGRPCTypeConverterTemplate) Path() string {
	return "./transport/converter/protobuf/type_converters.go"
}

// Render stub method for golang to protobuf converter.
//
//		func IntListToProto(positions []int) (protoPositions []int64, convPositionsErr error) {
//			return
//		}
//
func (t StubGRPCTypeConverterTemplate) stubConverterToProto(field *parser.FuncField, iface *parser.Interface) *Statement {
	return Func().Id(typeToProto(field)).
		Params(Id(util.ToLowerFirst(field.Name)).Add(fieldType(field))).
		Params(Id("proto"+util.ToUpperFirst(field.Name)).Add(t.protoFieldType(field, iface)), Id("conv"+util.ToUpperFirst(field.Name)+"Err").Error()).
		Block(
			Return(),
		)
}

// Render stub method for protobuf to golang converter.
//
//		func ProtoToIntList(protoPositions []int64) (positions []int, convPositionsErr error) {
//			return
//		}
//
func (t StubGRPCTypeConverterTemplate) stubConverterProtoTo(field *parser.FuncField, iface *parser.Interface) *Statement {
	return Func().Id(protoToType(field)).
		Params(Id("proto"+util.ToUpperFirst(field.Name)).Add(t.protoFieldType(field, iface))).
		Params(Id(util.ToLowerFirst(field.Name)).Add(fieldType(field)), Id("conv"+util.ToUpperFirst(field.Name)+"Err").Error()).
		Block(
			Return(),
		)
}

// Render protobuf field type for given func field.
//
//  	*repository.Visit
//
func (t StubGRPCTypeConverterTemplate) protoFieldType(field *parser.FuncField, iface *parser.Interface) *Statement {
	c := &Statement{}

	if field.IsArray {
		c.Index()
	}

	if field.IsPointer {
		c.Op("*")
	}

	protoType := field.Type
	if tmp, ok := goToProtoTypesMap[field.Type]; ok {
		protoType = tmp
	}

	if field.Package != nil {
		c.Qual(protobufPath(iface), protoType)
	} else {
		c.Id(protoType)
	}

	return c
}
