package template

import (
	. "github.com/dave/jennifer/jen"
	"github.com/devimteam/microgen/generator/write_strategy"
	"github.com/devimteam/microgen/util"
	"github.com/vetcher/godecl/types"
)

type endpointsTemplate struct {
	Info *GenerationInfo
}

func NewEndpointsTemplate(info *GenerationInfo) Template {
	return &endpointsTemplate{
		Info: info,
	}
}

func endpointStructName(str string) string {
	return str + "Endpoint"
}

// Renders endpoints file.
//
//		// This file was automatically generated by "microgen" utility.
//		// Please, do not edit.
//		package stringsvc
//
//		import (
//			context "context"
//			endpoint "github.com/go-kit/kit/endpoint"
//		)
//
//		type Endpoints struct {
//			CountEndpoint endpoint.Endpoint
//		}
//
//		func (e *Endpoints) Count(ctx context.Context, text string, symbol string) (count int, positions []int) {
//			req := CountRequest{
//				Symbol: symbol,
//				Text:   text,
//			}
//			resp, err := e.CountEndpoint(ctx, &req)
//			if err != nil {
//				return
//			}
//			return resp.(*CountResponse).Count, resp.(*CountResponse).Positions
//		}
//
//		func CountEndpoint(svc StringService) endpoint.Endpoint {
//			return func(ctx context.Context, request interface{}) (interface{}, error) {
//				req := request.(*CountRequest)
//				count, positions := svc.Count(ctx, req.Text, req.Symbol)
//				return &CountResponse{
//					Count:     count,
//					Positions: positions,
//				}, nil
//			}
//		}
//
func (t *endpointsTemplate) Render() write_strategy.Renderer {
	f := NewFile(t.Info.ServiceImportPackageName)
	f.PackageComment(FileHeader)
	f.PackageComment(`Please, do not edit.`)

	f.Type().Id("Endpoints").StructFunc(func(g *Group) {
		for _, signature := range t.Info.Iface.Methods {
			g.Id(endpointStructName(signature.Name)).Qual(PackagePathGoKitEndpoint, "Endpoint")
		}
	}).Line()

	for _, signature := range t.Info.Iface.Methods {
		f.Add(serviceEndpointMethod(signature)).Line().Line()
	}
	f.Line()
	for _, signature := range t.Info.Iface.Methods {
		f.Add(createEndpoint(signature, t.Info)).Line().Line()
	}

	return f
}

func (endpointsTemplate) DefaultPath() string {
	return "./endpoints.go"
}

func (endpointsTemplate) Prepare() error {
	return nil
}

func (t *endpointsTemplate) ChooseStrategy() (write_strategy.Strategy, error) {
	return write_strategy.NewCreateFileStrategy(t.Info.AbsOutPath, t.DefaultPath()), nil
}

// Render full endpoints method.
//
//		func (e *Endpoints) Count(ctx context.Context, text string, symbol string) (count int, positions []int) {
//			req := CountRequest{
//				Symbol: symbol,
//				Text:   text,
//			}
//			resp, err := e.CountEndpoint(ctx, &req)
//			if err != nil {
//				return
//			}
//			return resp.(*CountResponse).Count, resp.(*CountResponse).Positions
//		}
//
func serviceEndpointMethod(signature *types.Function) *Statement {
	return methodDefinition("Endpoints", signature).
		BlockFunc(serviceEndpointMethodBody(signature))
}

// Render interface method body.
//
//		req := CountRequest{
//			Symbol: symbol,
//			Text:   text,
//		}
//		resp, err := e.CountEndpoint(ctx, &req)
//		if err != nil {
//			return
//		}
//		return resp.(*CountResponse).Count, resp.(*CountResponse).Positions
//
func serviceEndpointMethodBody(fn *types.Function) func(g *Group) {
	reqName := endpointExchange("request", fn)
	respName := endpointExchange("response", fn)
	return func(g *Group) {
		g.Id(reqName).Op(":=").Id(requestStructName(fn)).Values(dictByVariables(removeContextIfFirst(fn.Args)))
		g.Add(endpointResponse(respName, fn)).Id(util.LastUpperOrFirst("Endpoint")).Dot(endpointStructName(fn.Name)).Call(Id(firstArgName(fn)), Op("&").Id(reqName))
		g.If(Id(nameOfLastResultError(fn)).Op("!=").Nil().Block(
			If(Qual(PackagePathGoogleGRPC, "Code").Call(Id(nameOfLastResultError(fn))).Op("==").Qual(PackagePathGoogleGRPCCodes, "Internal").Op("||").
				Qual(PackagePathGoogleGRPC, "Code").Call(Id(nameOfLastResultError(fn))).Op("==").Qual(PackagePathGoogleGRPCCodes, "Unknown").Block(
				Id(nameOfLastResultError(fn)).Op("=").Qual("errors", "New").Call(Qual(PackagePathGoogleGRPC, "ErrorDesc").Call(Id(nameOfLastResultError(fn)))),
			)).Line().Return(),
		))
		g.ReturnFunc(func(group *Group) {
			for _, field := range removeErrorIfLast(fn.Results) {
				group.Id(respName).Assert(Op("*").Id(responseStructName(fn))).Op(".").Add(structFieldName(&field))
			}
			group.Id(nameOfLastResultError(fn))
		})
	}
}

// Helper func for `serviceEndpointMethodBody`
func endpointResponse(respName string, fn *types.Function) *Statement {
	if len(removeErrorIfLast(fn.Results)) > 0 {
		return List(Id(respName), Id(nameOfLastResultError(fn))).Op(":=")
	}
	return List(Id("_"), Id(nameOfLastResultError(fn))).Op("=")
}

// For custom ctx in service interface (e.g. context or ctxxx).
func firstArgName(signature *types.Function) string {
	return util.ToLowerFirst(signature.Args[0].Name)
}

// Render new Endpoint body.
//
//		return func(ctx context.Context, request interface{}) (interface{}, error) {
//			req := request.(*CountRequest)
//			count, positions := svc.Count(ctx, req.Text, req.Symbol)
//			return &CountResponse{
//				Count:     count,
//				Positions: positions,
//			}, nil
//		}
//
func createEndpointBody(signature *types.Function) *Statement {
	return Return(Func().Params(
		Id(firstArgName(signature)).Qual("context", "Context"),
		Id("request").Interface(),
	).Params(
		Interface(),
		Error(),
	).BlockFunc(func(g *Group) {
		methodParams := removeContextIfFirst(signature.Args)
		if len(methodParams) > 0 {
			g.Id("_req").Op(":=").Id("request").Assert(Op("*").Id(requestStructName(signature)))
		}

		g.Add(paramNames(signature.Results).
			Op(":=").
			Id("svc").
			Dot(signature.Name).
			CallFunc(func(g *Group) {
				g.Add(Id(firstArgName(signature)))
				for _, field := range methodParams {
					v := Dot(util.ToUpperFirst(field.Name))
					if types.IsEllipsis(field.Type) {
						v.Op("...")
					}
					g.Add(Id("_req").Add(v))
				}
			}))

		g.Return(
			Op("&").Id(responseStructName(signature)).Values(dictByVariables(removeErrorIfLast(signature.Results))),
			Id(nameOfLastResultError(signature)),
		)
	}))
}

// Render full new Endpoint function.
//
//		func CountEndpoint(svc StringService) endpoint.Endpoint {
//			return func(ctx context.Context, request interface{}) (interface{}, error) {
//				req := request.(*CountRequest)
//				count, positions := svc.Count(ctx, req.Text, req.Symbol)
//				return &CountResponse{
//					Count:     count,
//					Positions: positions,
//				}, nil
//			}
//		}
//
func createEndpoint(signature *types.Function, info *GenerationInfo) *Statement {
	return Func().
		Id(endpointStructName(signature.Name)).Params(Id("svc").Id(info.Iface.Name)).Params(Qual(PackagePathGoKitEndpoint, "Endpoint")).
		Block(createEndpointBody(signature))
}

func endpointExchange(base string, fn *types.Function) string {
	return "endpoint" + util.ToUpperFirst(fn.Name) + util.ToUpperFirst(base)
}
