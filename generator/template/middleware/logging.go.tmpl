// Code generated by microgen.
// DO NOT EDIT!
package middleware

import (
{{- range .Interface.Imports }}
	{{ .Alias }} {{ .Path }}
{{- end }}
	"time"

	"github.com/go-kit/kit/log"
	"{{ .PackageFullName }}/{{ .Interface.PackageName }}"
)

// ServiceLogging returns a service middleware that logs the
// parameters and result of each method invocation.
func ServiceLogging(logger log.Logger) Middleware {
	return func(next {{ .Interface.PackageName }}.{{ .Interface.Name }}) {{ .Interface.PackageName }}.{{ .Interface.Name }} {
		return serviceLogging{
			logger: logger,
			next:   next,
		}
	}
}


type serviceLogging struct {
	logger log.Logger
	next   {{ .Interface.PackageName }}.{{ .Interface.Name }}
}

{{- range .Interface.FuncSignatures }}

func (sl serviceLogging) {{ .Name }}(ctx context.Context, title string, teamViewerNumber string, pointOfSaleId string, equipmentId string) (workplace *entity.Workplace, err error) {
	defer func(begin time.Time) {
		sl.logger.Log(
			"method", "CreateWorkplace",
			"title", title,
			"teamViewerNumber", teamViewerNumber,
			"pointOfSaleId", pointOfSaleId,
			"equipmentId", equipmentId,
			"workplace", workplace,
			"error", err,
			"took", time.Since(begin),
		)
	}(time.Now())
	return sl.next.CreateWorkplace(ctx, title, teamViewerNumber, pointOfSaleId, equipmentId)
}

{{ end }}