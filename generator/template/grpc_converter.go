package template

import (
	. "github.com/dave/jennifer/jen"
	"github.com/devimteam/microgen/parser"
	"github.com/devimteam/microgen/util"
)

var (
	defaultProtobufTypes = []string{"string", "bool", "byte", "int64", "uint64", "float64", "int32", "uint32", "float32"}
	goToProtobufTypesMap = map[string]string{
		"uint": "uint64",
		"int":  "int64",
	}
	defaultGolangTypes = []string{"string", "bool", "int", "uint", "byte", "int64", "uint64", "float64", "int32", "uint32", "float32"}
)

type GRPCConverterTemplate struct {
	PackagePath string
}

func utilPackagePath(path string) string {
	return path + "/util"
}

func (t GRPCClientTemplate) converterPackagePath() string {
	return t.PackagePath + "/transport/converter/protobuf"
}

// Renders converter file.
//
//		// This file was automatically generated by "microgen" utility.
//		// Please, do not edit.
//		package transportgrpc
//
//		import (
//			context "context"
//			grpc "github.com/devimteam/go-kit/transportlayer/grpc"
//			svc "github.com/devimteam/microgen/test/svc"
//			stringsvc "gitlab.devim.team/protobuf/stringsvc"
//		)
//
//		var CountConverter = &grpc.EndpointConverter{
//			func(_ context.Context, request interface{}) (interface{}, error) {
//				req := request.(*svc.CountRequest)
//				return &stringsvc.CountRequest{
//					Symbol: req.Symbol,
//					Text:   req.Text,
//				}, nil
//			},
//			func(_ context.Context, response interface{}) (interface{}, error) {
//				resp := response.(*svc.CountResponse)
//				return &stringsvc.CountResponse{
//					Count:     int64(resp.Count),
//					Positions: []int64(resp.Positions),
//				}, nil
//			},
//			func(_ context.Context, request interface{}) (interface{}, error) {
//				req := request.(*stringsvc.CountRequest)
//				return &svc.CountRequest{
//					Symbol: string(req.Symbol),
//					Text:   string(req.Text),
//				}, nil
//			},
//			func(_ context.Context, response interface{}) (interface{}, error) {
//				resp := response.(*stringsvc.CountResponse)
//				return &svc.CountResponse{
//					Count:     int(resp.Count),
//					Positions: []int(resp.Positions),
//				}, nil
//			},
//			stringsvc.CountResponse{},
//		}
//
func (t GRPCConverterTemplate) Render(i *parser.Interface) *File {
	f := NewFile("transportgrpc")

	for _, signature := range i.FuncSignatures {
		f.Var().Id(converterStructName(signature)).Op("=").Op("&").Qual(PackagePathTransportLayerGRPC, "EndpointConverter").
			ValuesFunc(func(g *Group) {
				g.Add(t.encodeRequest(signature, i))
				g.Add(t.encodeResponse(signature, i))
				g.Add(t.decodeRequest(signature, i))
				g.Add(t.decodeResponse(signature, i))
				g.Add(t.replyType(signature, i))
				g.Line()
			})
		f.Line()
	}

	return f
}

// Renders
// 		util.ProtoToData(resp.Data)
// or
// 		util.DataToProto(resp.Data)
// based on reverse flag
func nameToProto(name string, reverse bool) string {
	if !reverse {
		return name + "ToProto"
	}
	return "ProtoTo" + name
}

func (GRPCConverterTemplate) Path() string {
	return "./transport/grpc/converter.go"
}

// Renders exchanges that represents requests and responses.
//
//		req.Symbol
// or
//		int(resp.Count)
//
func golangTypeToProto(object string, field *parser.FuncField) (*Statement, bool) {
	if isDefaultProtobufType(field.Type) {
		return Id(object).Dot(util.ToUpperFirst(field.Name)), false
	}
	if newType, ok := goToProtobufTypesMap[field.Type]; ok {
		newField := &parser.FuncField{
			Type:      newType,
			Name:      field.Name,
			IsArray:   field.IsArray,
			Package:   field.Package,
			IsPointer: field.IsPointer,
		}
		return fieldType(newField).Call(Id(object).Dot(util.ToUpperFirst(field.Name))), false
	}
	return Add(), true
}

// Renders type conversion to default golang types
// 		int(resp.Count)
// or nothing
func protoTypeToGolang(object string, field *parser.FuncField) (*Statement, bool) {
	if isDefaultGolangType(field.Type) {
		return fieldType(field).Call(Id(object).Dot(util.ToUpperFirst(field.Name))), false
	}
	return Add(), true
}

func isDefaultProtobufType(typeName string) bool {
	for _, t := range defaultProtobufTypes {
		if t == typeName {
			return true
		}
	}
	return false
}

func isDefaultGolangType(typeName string) bool {
	for _, t := range defaultGolangTypes {
		if t == typeName {
			return true
		}
	}
	return false
}

// Renders function for encoding request, golang type converts to proto type
//
//		func(_ context.Context, request interface{}) (interface{}, error) {
//			req := request.(*employeesvc.CreateRequest)
//			return &employeesvc1.CreateRequest{Employee: util.EmployeeToProto(req.Employee)}, nil
//		}
//
func (t GRPCConverterTemplate) encodeRequest(signature *parser.FuncSignature, i *parser.Interface) *Statement {
	methodParams := removeContextIfFirst(signature.Params)
	assertedVariable := Id("req").Op(":=")
	if len(methodParams) == 0 {
		assertedVariable = Id("_").Op("=")
	}
	return Line().Func().Call(Op("_").Qual(PackagePathContext, "Context"), Id("request").Interface()).Params(Interface(), Error()).BlockFunc(
		func(group *Group) {
			group.Add(assertedVariable).Id("request").Assert(Op("*").Qual(t.PackagePath, requestStructName(signature)))
			group.Return().List(Op("&").Qual(protobufPath(i), requestStructName(signature)).Values(DictFunc(func(dict Dict) {
				for _, field := range methodParams {
					code, isCustom := golangTypeToProto("req", field)
					if isCustom {
						if field.Type == "error" {
							code = Qual(utilPackagePath(t.PackagePath), "ErrorToString").Call(Id("req").Dot(util.ToUpperFirst(field.Name)))
						} else {
							code = Qual(utilPackagePath(t.PackagePath), nameToProto(util.ToUpperFirst(field.Name), false)).
								Call(Id("req").
									Dot(util.ToUpperFirst(field.Name)))
						}
					}
					dict[structFieldName(field)] = Line().Add(code)
				}
			})), Nil())
		},
	)
}

// Same as encodeRequest but response
func (t GRPCConverterTemplate) encodeResponse(signature *parser.FuncSignature, i *parser.Interface) *Statement {
	methodResults := removeContextIfFirst(signature.Results)
	assertedVariable := Id("resp").Op(":=")
	if len(methodResults) == 0 {
		assertedVariable = Id("_").Op("=")
	}
	return Line().Func().Call(Op("_").Qual(PackagePathContext, "Context"), Id("response").Interface()).Params(Interface(), Error()).BlockFunc(
		func(group *Group) {
			group.Add(assertedVariable).Id("response").Assert(Op("*").Qual(t.PackagePath, responseStructName(signature)))
			group.Return().List(Op("&").Qual(protobufPath(i), responseStructName(signature)).Values(DictFunc(func(dict Dict) {
				for _, field := range methodResults {
					code, isCustom := golangTypeToProto("resp", field)
					if isCustom {
						if field.Type == "error" {
							code = Qual(utilPackagePath(t.PackagePath), "ErrorToString").Call(Id("resp").Dot(util.ToUpperFirst(field.Name)))
						} else {
							code = Qual(utilPackagePath(t.PackagePath), nameToProto(util.ToUpperFirst(field.Name), false)).
								Call(Id("resp").
									Dot(util.ToUpperFirst(field.Name)))
						}
					}
					dict[structFieldName(field)] = Line().Add(code)
				}
			})), Nil())
		},
	)
}

// Renders function for decoding request, proto type converts to golang type
//
//		func(_ context.Context, request interface{}) (interface{}, error) {
//			req := request.(*stringsvc.CountRequest)
//			return &svc.CountRequest{
//				Symbol: string(req.Symbol),
//				Text:   string(req.Text),
//			}, nil
//		},
//
func (t GRPCConverterTemplate) decodeRequest(signature *parser.FuncSignature, i *parser.Interface) *Statement {
	methodParams := removeContextIfFirst(signature.Params)
	assertedVariable := Id("req").Op(":=")
	if len(methodParams) == 0 {
		assertedVariable = Id("_").Op("=")
	}
	return Line().Func().Call(Op("_").Qual(PackagePathContext, "Context"), Id("request").Interface()).Params(Interface(), Error()).BlockFunc(
		func(group *Group) {
			group.Add(assertedVariable).Id("request").Assert(Op("*").Qual(protobufPath(i), requestStructName(signature)))
			group.Return().List(Op("&").Qual(t.PackagePath, requestStructName(signature)).Values(DictFunc(func(dict Dict) {
				for _, field := range methodParams {
					code, isCustom := protoTypeToGolang("req", field)
					if isCustom {
						if field.Type == "error" {
							code = Qual(utilPackagePath(t.PackagePath), "StringToError").Call(Id("req").Dot(util.ToUpperFirst(field.Name)))
						} else {
							code = Qual(utilPackagePath(t.PackagePath), nameToProto(util.ToUpperFirst(field.Name), true)).
								Call(Id("req").
									Dot(util.ToUpperFirst(field.Name)))
						}
					}
					dict[structFieldName(field)] = Line().Add(code)
				}
			})), Nil())
		},
	)
}

// Same as decodeRequest but response
func (t GRPCConverterTemplate) decodeResponse(signature *parser.FuncSignature, i *parser.Interface) *Statement {
	methodResults := removeContextIfFirst(signature.Results)
	assertedVariable := Id("resp").Op(":=")
	if len(methodResults) == 0 {
		assertedVariable = Id("_").Op("=")
	}
	return Line().Func().Call(Op("_").Qual(PackagePathContext, "Context"), Id("response").Interface()).Params(Interface(), Error()).BlockFunc(
		func(group *Group) {
			group.Add(assertedVariable).Id("response").Assert(Op("*").Qual(protobufPath(i), responseStructName(signature)))
			group.Return().List(Op("&").Qual(t.PackagePath, responseStructName(signature)).Values(DictFunc(func(dict Dict) {
				for _, field := range methodResults {
					code, isCustom := protoTypeToGolang("resp", field)
					if isCustom {
						if field.Type == "error" {
							code = Qual(utilPackagePath(t.PackagePath), "StringToError").Call(Id("resp").Dot(util.ToUpperFirst(field.Name)))
						} else {
							code = Qual(utilPackagePath(t.PackagePath), nameToProto(util.ToUpperFirst(field.Name), true)).
								Call(Id("resp").
									Dot(util.ToUpperFirst(field.Name)))
						}
					}
					dict[structFieldName(field)] = Line().Add(code)
				}
			})), Nil())
		},
	)
}

// Renders reply type argument
// 		stringsvc.CountResponse{},
func (t GRPCConverterTemplate) replyType(signature *parser.FuncSignature, i *parser.Interface) *Statement {
	return Line().Qual(protobufPath(i), responseStructName(signature)).Values()
}
