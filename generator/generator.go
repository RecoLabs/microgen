package generator

import (
	"fmt"
	"io"

	"github.com/vetcher/godecl/types"
	"github.com/vetcher/jennifer/jen"
)

type Renderer interface {
	Render(io.Writer) error
}

type Generator interface {
	Generate() error
}

type Strategy interface {
	Write(Renderer, Template) error
}

type forceGenerator struct {
	templates []Template
	iface     *types.Interface
	strategy  Strategy
}

func NewGenerator(ts []Template, iface *types.Interface, strategy Strategy) Generator {
	return &forceGenerator{
		templates: ts,
		iface:     iface,
		strategy:  strategy,
	}
}

func (g *forceGenerator) Generate() error {
	for _, t := range g.templates {
		statement := t.Render(g.iface)
		file := jen.NewFile(t.PackageName())
		file.PackageComment(`This file was automatically generated by "microgen" utility.`)
		file.PackageComment(`Please, do not edit.`)
		file.Add(statement)
		err := g.strategy.Write(file, t)
		if err != nil {
			return fmt.Errorf("write error: %v", err)
		}
	}
	return nil
}

// For future purposes
type appendGenerator struct {
	templates []Template
	iface     *types.Interface
	strategy  Strategy
}

func NewAppendGenerator(ts []Template, iface *types.Interface, strategy Strategy) Generator {
	return &appendGenerator{
		templates: ts,
		iface:     iface,
		strategy:  strategy,
	}
}

func (g *appendGenerator) Generate() error {
	for _, t := range g.templates {
		statement := t.Render(g.iface)
		err := g.strategy.Write(statement, t)
		if err != nil {
			return fmt.Errorf("write error: %v", err)
		}
	}
	return nil
}
