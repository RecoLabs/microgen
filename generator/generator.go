package generator

import (
	"fmt"

	"github.com/devimteam/microgen/generator/write_method"
	"github.com/vetcher/jennifer/jen"
)

type Generator interface {
	Generate() error
}

type generationUnit struct {
	template Template

	writeMethod write_method.Method
	absOutPath  string
	force       bool
}

func NewGenUnit(tmpl Template, outPath string, force bool) (*generationUnit, error) {
	method, err := tmpl.ChooseMethod()
	if err != nil {
		return nil, err
	}
	return &generationUnit{
		template:    tmpl,
		absOutPath:  outPath,
		writeMethod: method,
		force:       force,
	}, nil
}

func (g *generationUnit) Generate() error {
	statement := g.template.Render()
	if g.force {
		file := jen.NewFile("sss")
		file.PackageComment(`This file was automatically generated by "microgen" utility.`)
		file.PackageComment(`Please, do not edit.`)
		file.Add(statement)
		err := g.writeMethod.Write(file)
		if err != nil {
			return fmt.Errorf("write error: %v", err)
		}
	} else {
		err := g.writeMethod.Write(statement)
		if err != nil {
			return fmt.Errorf("write error: %v", err)
		}
	}
	return nil
}

/*
type forceGenerator struct {
	templates []Template
	iface     *types.Interface
}

func NewGenerator(ts []Template, iface *types.Interface) Generator {
	return &forceGenerator{
		templates: ts,
		iface:     iface,
	}
}

func (g *forceGenerator) Generate() error {
	for _, t := range g.templates {
		statement := t.Render(g.iface)
		file := jen.NewFile(t.PackageName())
		file.PackageComment(`This file was automatically generated by "microgen" utility.`)
		file.PackageComment(`Please, do not edit.`)
		file.Add(statement)
		err := g.strategy.Write(file, t)
		if err != nil {
			return fmt.Errorf("write error: %v", err)
		}
	}
	return nil
}

// For future purposes
type appendGenerator struct {
	templates []Template
	iface     *types.Interface
}

func NewAppendGenerator(ts []Template, iface *types.Interface) Generator {
	return &appendGenerator{
		templates: ts,
		iface:     iface,
	}
}

func (g *appendGenerator) Generate() error {
	for _, t := range g.templates {
		statement := t.Render(g.iface)
		err := g.strategy.Write(statement, t)
		if err != nil {
			return fmt.Errorf("write error: %v", err)
		}
	}
	return nil
}
*/
