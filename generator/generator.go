package generator

import (
	"fmt"

	"github.com/devimteam/microgen/generator/template"
	"github.com/devimteam/microgen/generator/write_strategy"
)

type Generator interface {
	Generate() error
}

type generationUnit struct {
	template template.Template

	writeMethod write_strategy.Strategy
	absOutPath  string
	force       bool
}

func NewGenUnit(tmpl template.Template, outPath string, force bool) (*generationUnit, error) {
	err := tmpl.Prepare()
	if err != nil {
		return nil, fmt.Errorf("%s: prepare error: %v", tmpl.DefaultPath(), err)
	}
	method, err := tmpl.ChooseStrategy()
	if err != nil {
		return nil, err
	}
	return &generationUnit{
		template:    tmpl,
		absOutPath:  outPath,
		writeMethod: method,
		force:       force,
	}, nil
}

func (g *generationUnit) Generate() error {
	code := g.template.Render()
	err := g.writeMethod.Write(code)
	if err != nil {
		return fmt.Errorf("write error: %v", err)
	}
	return nil
}

/*
type forceGenerator struct {
	templates []Template
	iface     *types.Interface
	strategy  Strategy
}

func NewGenerator(ts []Template, iface *types.Interface, strategy Strategy) Generator {
	return &forceGenerator{
		templates: ts,
		iface:     iface,
		strategy:  strategy,
	}
}

func (g *fileGenerator) Generate() error {
	for _, t := range g.templates {
		statement := t.Render(g.iface)
		file := jen.NewFile(t.PackageName())
		file.PackageComment(`This file was automatically generated by "microgen" utility.`)
		file.PackageComment(`Please, do not edit.`)
		file.Add(statement)
		err := g.strategy.Write(file, t)
		if err != nil {
			return fmt.Errorf("write error: %v", err)
		}
	}
	return nil
}
*/
