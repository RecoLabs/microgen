// This file was automatically generated by "microgen 0.6.0" utility.
// Please, do not edit.
package middleware

import (
	context "context"
	generated "github.com/devimteam/microgen/example/generated"
	entity "github.com/devimteam/microgen/example/svc/entity"
	log "github.com/go-kit/kit/log"
	time "time"
)

// ServiceLogging writes params, results and working time of method call to provided logger after its execution.
func ServiceLogging(logger log.Logger) Middleware {
	return func(next generated.StringService) generated.StringService {
		return &serviceLogging{
			logger: logger,
			next:   next,
		}
	}
}

type serviceLogging struct {
	logger log.Logger
	next   generated.StringService
}

func (L *serviceLogging) Uppercase(ctx context.Context, str ...map[string]interface{}) (ans string, err error) {
	defer func(begin time.Time) {
		L.logger.Log(
			"@method", "Uppercase",
			"request", generated.UppercaseRequest{Str: str},
			"response", generated.UppercaseResponse{Ans: ans},
			"took", time.Since(begin))
	}(time.Now())
	return L.next.Uppercase(ctx, str...)
}

func (L *serviceLogging) Count(ctx context.Context, text string, symbol string) (count int, positions []int, err error) {
	defer func(begin time.Time) {
		L.logger.Log(
			"@method", "Count",
			"request", generated.CountRequest{
				Symbol: symbol,
				Text:   text,
			},
			"response", generated.CountResponse{
				Count:     count,
				Positions: positions,
			},
			"took", time.Since(begin))
	}(time.Now())
	return L.next.Count(ctx, text, symbol)
}

func (L *serviceLogging) TestCase(ctx context.Context, comments []*entity.Comment) (tree map[string]int, err error) {
	defer func(begin time.Time) {
		L.logger.Log(
			"@method", "TestCase",
			"request", generated.TestCaseRequest{Comments: comments},
			"response", generated.TestCaseResponse{Tree: tree},
			"took", time.Since(begin))
	}(time.Now())
	return L.next.TestCase(ctx, comments)
}
