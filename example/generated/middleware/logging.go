// This file was automatically generated by "microgen 0.8.0" utility.
// Please, do not edit.
package middleware

import (
	context "context"
	generated "github.com/devimteam/microgen/example/generated"
	entity "github.com/devimteam/microgen/example/svc/entity"
	log "github.com/go-kit/kit/log"
	time "time"
)

// ServiceLogging writes params, results and working time of method call to provided logger after its execution.
func ServiceLogging(logger log.Logger) Middleware {
	return func(next generated.StringService) generated.StringService {
		return &serviceLogging{
			logger: logger,
			next:   next,
		}
	}
}

type serviceLogging struct {
	logger log.Logger
	next   generated.StringService
}

func (L *serviceLogging) Uppercase(arg0 context.Context, arg1 map[string]string) (res0 string, res1 error) {
	defer func(begin time.Time) {
		L.logger.Log(
			"method", "Uppercase",
			"request", logUppercaseRequest{StringsMap: arg1},
			"took", time.Since(begin))
	}(time.Now())
	return L.next.Uppercase(arg0, arg1)
}

func (L *serviceLogging) Count(arg0 context.Context, arg1 string, arg2 string) (res0 int, res1 []int, res2 error) {
	defer func(begin time.Time) {
		L.logger.Log(
			"method", "Count",
			"request", logCountRequest{
				Symbol: arg2,
				Text:   arg1,
			},
			"response", logCountResponse{
				Count:     res0,
				Positions: res1,
			},
			"err", res2,
			"took", time.Since(begin))
	}(time.Now())
	return L.next.Count(arg0, arg1, arg2)
}

func (L *serviceLogging) TestCase(arg0 context.Context, arg1 []*entity.Comment) (res0 map[string]int, res1 error) {
	defer func(begin time.Time) {
		L.logger.Log(
			"method", "TestCase",
			"request", logTestCaseRequest{
				Comments:    arg1,
				LenComments: len(arg1),
			},
			"response", logTestCaseResponse{Tree: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return L.next.TestCase(arg0, arg1)
}

type (
	logUppercaseRequest struct {
		StringsMap map[string]string
	}
	logCountRequest struct {
		Text   string
		Symbol string
	}
	logCountResponse struct {
		Count     int
		Positions []int
	}
	logTestCaseRequest struct {
		Comments    []*entity.Comment
		LenComments int `json:"len(Comments)"`
	}
	logTestCaseResponse struct {
		Tree map[string]int
	}
)
