// This file was automatically generated by "microgen 0.9.0-beta" utility.
// DO NOT EDIT.
package middleware

import (
	"context"
	"fmt"
	service "github.com/devimteam/microgen/example/generated"
	entity "github.com/devimteam/microgen/example/svc/entity"
	log "github.com/go-kit/kit/log"
)

// ServiceRecovering recovers panics from method calls, writes to provided logger and returns the error of panic as method error.
func ServiceRecovering(logger log.Logger) Middleware {
	return func(next service.StringService) service.StringService {
		return &serviceRecovering{
			logger: logger,
			next:   next,
		}
	}
}

type serviceRecovering struct {
	logger log.Logger
	next   service.StringService
}

func (R *serviceRecovering) Uppercase(ctx context.Context, stringsMap map[string]string) (ans string, err error) {
	defer func() {
		if r := recover(); r != nil {
			R.logger.Log("method", "Uppercase", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return R.next.Uppercase(ctx, stringsMap)
}

func (R *serviceRecovering) Count(ctx context.Context, text string, symbol string) (count int, positions []int, err error) {
	defer func() {
		if r := recover(); r != nil {
			R.logger.Log("method", "Count", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return R.next.Count(ctx, text, symbol)
}

func (R *serviceRecovering) TestCase(ctx context.Context, comments []*entity.Comment) (tree map[string]int, err error) {
	defer func() {
		if r := recover(); r != nil {
			R.logger.Log("method", "TestCase", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return R.next.TestCase(ctx, comments)
}
