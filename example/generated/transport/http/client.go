// This file was automatically generated by "microgen 0.8.0" utility.
// Please, do not edit.
package transporthttp

import (
	generated "github.com/devimteam/microgen/example/generated"
	http1 "github.com/devimteam/microgen/example/generated/transport/converter/http"
	log "github.com/go-kit/kit/log"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	http "github.com/go-kit/kit/transport/http"
	opentracinggo "github.com/opentracing/opentracing-go"
	url "net/url"
	strings "strings"
)

func NewHTTPClient(addr string, logger log.Logger, tracer opentracinggo.Tracer, opts ...http.ClientOption) (generated.StringService, error) {
	if !strings.HasPrefix(addr, "http") {
		addr = "http://" + addr
	}
	u, err := url.Parse(addr)
	if err != nil {
		return nil, err
	}
	opts = append(opts, http.ClientBefore(
		opentracing.ContextToHTTP(tracer, logger),
	))
	return &generated.Endpoints{
		CountEndpoint: opentracing.TraceClient(
			tracer,
			"Count",
		)(
			http.NewClient(
				"GET",
				u,
				http1.EncodeHTTPCountRequest,
				http1.DecodeHTTPCountResponse,
				opts...,
			).Endpoint(),
		),
		TestCaseEndpoint: opentracing.TraceClient(
			tracer,
			"TestCase",
		)(
			http.NewClient(
				"POST",
				u,
				http1.EncodeHTTPTestCaseRequest,
				http1.DecodeHTTPTestCaseResponse,
				opts...,
			).Endpoint(),
		),
		UppercaseEndpoint: opentracing.TraceClient(
			tracer,
			"Uppercase",
		)(
			http.NewClient(
				"POST",
				u,
				http1.EncodeHTTPUppercaseRequest,
				http1.DecodeHTTPUppercaseResponse,
				opts...,
			).Endpoint(),
		),
	}, nil
}
