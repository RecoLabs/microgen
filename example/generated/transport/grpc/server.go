// This file was automatically generated by "microgen 0.7.0b" utility.
// Please, do not edit.
package transportgrpc

import (
	generated "github.com/devimteam/microgen/example/generated"
	protobuf1 "github.com/devimteam/microgen/example/generated/transport/converter/protobuf"
	protobuf "github.com/devimteam/microgen/example/protobuf"
	grpc "github.com/go-kit/kit/transport/grpc"
	context "golang.org/x/net/context"
)

type stringServiceServer struct {
	uppercase grpc.Handler
	count     grpc.Handler
	testCase  grpc.Handler
}

func NewGRPCServer(endpoints *generated.Endpoints, opts ...grpc.ServerOption) protobuf.StringServiceServer {
	return &stringServiceServer{
		count: grpc.NewServer(
			endpoints.CountEndpoint,
			protobuf1.DecodeCountRequest,
			protobuf1.EncodeCountResponse,
			opts...,
		),
		testCase: grpc.NewServer(
			endpoints.TestCaseEndpoint,
			protobuf1.DecodeTestCaseRequest,
			protobuf1.EncodeTestCaseResponse,
			opts...,
		),
		uppercase: grpc.NewServer(
			endpoints.UppercaseEndpoint,
			protobuf1.DecodeUppercaseRequest,
			protobuf1.EncodeUppercaseResponse,
			opts...,
		),
	}
}

func (S *stringServiceServer) Uppercase(ctx context.Context, req *protobuf.UppercaseRequest) (*protobuf.UppercaseResponse, error) {
	_, resp, err := S.uppercase.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*protobuf.UppercaseResponse), nil
}

func (S *stringServiceServer) Count(ctx context.Context, req *protobuf.CountRequest) (*protobuf.CountResponse, error) {
	_, resp, err := S.count.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*protobuf.CountResponse), nil
}

func (S *stringServiceServer) TestCase(ctx context.Context, req *protobuf.TestCaseRequest) (*protobuf.TestCaseResponse, error) {
	_, resp, err := S.testCase.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*protobuf.TestCaseResponse), nil
}
