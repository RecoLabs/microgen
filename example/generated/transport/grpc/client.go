// This file was automatically generated by "microgen 0.7.0" utility.
// Please, do not edit.
package transportgrpc

import (
	generated "github.com/devimteam/microgen/example/generated"
	protobuf "github.com/devimteam/microgen/example/generated/transport/converter/protobuf"
	protobuf1 "github.com/devimteam/microgen/example/protobuf"
	log "github.com/go-kit/kit/log"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	grpc1 "github.com/go-kit/kit/transport/grpc"
	opentracinggo "github.com/opentracing/opentracing-go"
	grpc "google.golang.org/grpc"
)

func NewGRPCClient(conn *grpc.ClientConn, logger log.Logger, tracer opentracinggo.Tracer, opts ...grpc1.ClientOption) generated.StringService {
	return &generated.Endpoints{
		CountEndpoint: grpc1.NewClient(
			conn,
			"service.string",
			"Count",
			protobuf.EncodeCountRequest,
			protobuf.DecodeCountResponse,
			protobuf1.CountResponse{},
			append(opts, grpc1.ClientBefore(
				opentracing.ContextToGRPC(tracer, logger)))...,
		).Endpoint(),
		TestCaseEndpoint: grpc1.NewClient(
			conn,
			"service.string",
			"TestCase",
			protobuf.EncodeTestCaseRequest,
			protobuf.DecodeTestCaseResponse,
			protobuf1.TestCaseResponse{},
			append(opts, grpc1.ClientBefore(
				opentracing.ContextToGRPC(tracer, logger)))...,
		).Endpoint(),
		UppercaseEndpoint: grpc1.NewClient(
			conn,
			"service.string",
			"Uppercase",
			protobuf.EncodeUppercaseRequest,
			protobuf.DecodeUppercaseResponse,
			protobuf1.UppercaseResponse{},
			append(opts, grpc1.ClientBefore(
				opentracing.ContextToGRPC(tracer, logger)))...,
		).Endpoint(),
	}
}
