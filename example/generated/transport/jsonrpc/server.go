// This file was automatically generated by "microgen 0.8.0" utility.
// Please, do not edit.
package transportjsonrpc

import (
	generated "github.com/devimteam/microgen/example/generated"
	protobuf "github.com/devimteam/microgen/example/generated/transport/converter/protobuf"
	log "github.com/go-kit/kit/log"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	jsonrpc "github.com/go-kit/kit/transport/http/jsonrpc"
	opentracinggo "github.com/opentracing/opentracing-go"
	http "net/http"
)

type stringServiceServer struct {
	uppercase http.Handler
	count     http.Handler
	testCase  http.Handler
}

func NewJSONRPCServer(endpoints *generated.Endpoints, logger log.Logger, tracer opentracinggo.Tracer, opts ...jsonrpc.ServerOption) http.Handler {
	return &stringServiceServer{
		count: jsonrpc.NewServer(
			jsonrpc.EndpointCodecMap{
				"v1.Count": jsonrpc.EndpointCodec{
					Decode:   protobuf.DecodeCountRequest,
					Encode:   protobuf.EncodeCountResponse,
					Endpoint: endpoints.CountEndpoint,
				}},
			append(opts, jsonrpc.ServerBefore(
				opentracing.HTTPToContext(tracer, "Count", logger)))...,
		),
		testCase: jsonrpc.NewServer(
			jsonrpc.EndpointCodecMap{
				"TestCase": jsonrpc.EndpointCodec{
					Decode:   protobuf.DecodeTestCaseRequest,
					Encode:   protobuf.EncodeTestCaseResponse,
					Endpoint: endpoints.TestCaseEndpoint,
				}},
			append(opts, jsonrpc.ServerBefore(
				opentracing.HTTPToContext(tracer, "TestCase", logger)))...,
		),
		uppercase: jsonrpc.NewServer(
			jsonrpc.EndpointCodecMap{
				"Uppercase": jsonrpc.EndpointCodec{
					Decode:   protobuf.DecodeUppercaseRequest,
					Encode:   protobuf.EncodeUppercaseResponse,
					Endpoint: endpoints.UppercaseEndpoint,
				}},
			append(opts, jsonrpc.ServerBefore(
				opentracing.HTTPToContext(tracer, "Uppercase", logger)))...,
		),
	}
}
