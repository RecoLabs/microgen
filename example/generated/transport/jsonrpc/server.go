// This file was automatically generated by "microgen 0.8.0" utility.
// Please, do not edit.
package transportjsonrpc

import (
	http "net/http"

	generated "github.com/devimteam/microgen/example/generated"
	http1 "github.com/devimteam/microgen/example/generated/transport/converter/http"
	log "github.com/go-kit/kit/log"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	jsonrpc "github.com/go-kit/kit/transport/http/jsonrpc"
	"github.com/gorilla/mux"
	opentracinggo "github.com/opentracing/opentracing-go"
)

func NewJSONRPCHandler(endpoints *generated.Endpoints, logger log.Logger, tracer opentracinggo.Tracer, opts ...jsonrpc.ServerOption) http.Handler {
	handler := jsonrpc.NewServer()
	mux.Methods("POST").Path("/uppercase").Handler(
		jsonrpc.NewServer(
			endpoints.UppercaseEndpoint,
			http1.DecodeUppercaseRequest,
			http1.EncodeUppercaseResponse,
			append(opts, jsonrpc.ServerBefore(
				opentracing.HTTPToContext(tracer, "Uppercase", logger)))...))
	mux.Methods("GET").Path("/count/{text}/{symbol}").Handler(
		jsonrpc.NewServer(
			endpoints.CountEndpoint,
			http1.DecodeCountRequest,
			http1.EncodeCountResponse,
			append(opts, jsonrpc.ServerBefore(
				opentracing.HTTPToContext(tracer, "Count", logger)))...))
	mux.Methods("POST").Path("/test-case").Handler(
		jsonrpc.NewServer(
			endpoints.TestCaseEndpoint,
			http1.DecodeTestCaseRequest,
			http1.EncodeTestCaseResponse,
			append(opts, jsonrpc.ServerBefore(
				opentracing.HTTPToContext(tracer, "TestCase", logger)))...))
	return handler
}
