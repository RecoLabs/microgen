// This file was automatically generated by "microgen 0.8.0" utility.
// Please, do not edit.
package transportjsonrpc

import (
	generated "github.com/devimteam/microgen/example/generated"
	jsonrpc1 "github.com/devimteam/microgen/example/generated/transport/converter/jsonrpc"
	log "github.com/go-kit/kit/log"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	jsonrpc "github.com/go-kit/kit/transport/http/jsonrpc"
	opentracinggo "github.com/opentracing/opentracing-go"
	url "net/url"
	strings "strings"
)

func NewJSONRPCClient(addr string, logger log.Logger, tracer opentracinggo.Tracer, opts ...jsonrpc.ClientOption) (generated.StringService, error) {
	if !strings.HasPrefix(addr, "http") {
		addr = "http://" + addr
	}
	u, err := url.Parse(addr)
	if err != nil {
		return nil, err
	}
	opts = append(opts, jsonrpc.ClientBefore(
		opentracing.ContextToHTTP(tracer, logger),
	))
	return &generated.Endpoints{
		CountEndpoint: opentracing.TraceClient(
			tracer,
			"Count",
		)(
			jsonrpc.NewClient(
				u,
				"v1.Count",
				append(
					opts,
					jsonrpc.ClientRequestEncoder(jsonrpc1.EncodeCountRequest),
					jsonrpc.ClientResponseDecoder(jsonrpc1.DecodeCountResponse),
				)...,
			).Endpoint(),
		),
		TestCaseEndpoint: opentracing.TraceClient(
			tracer,
			"TestCase",
		)(
			jsonrpc.NewClient(
				u,
				"TestCase",
				append(
					opts,
					jsonrpc.ClientRequestEncoder(jsonrpc1.EncodeTestCaseRequest),
					jsonrpc.ClientResponseDecoder(jsonrpc1.DecodeTestCaseResponse),
				)...,
			).Endpoint(),
		),
		UppercaseEndpoint: opentracing.TraceClient(
			tracer,
			"Uppercase",
		)(
			jsonrpc.NewClient(
				u,
				"Uppercase",
				append(
					opts,
					jsonrpc.ClientRequestEncoder(jsonrpc1.EncodeUppercaseRequest),
					jsonrpc.ClientResponseDecoder(jsonrpc1.DecodeUppercaseResponse),
				)...,
			).Endpoint(),
		),
	}, nil
}
